set mapSize 16;
set random $utils.random;

set global.br $this;

set Vector2 from function {x y}
{
    return (obj x $x y $y);
};

lua.eval {br.push = function(t, v) table.insert(t, v) end};

set roomMaxSize (Vector2 32 32);
set roomAmount 16;

set Creature from function {name position} 
{
    set tempcreature (obj name $name position $position);
    set tempcreature.globalPosition 1;
    set tempcreature.needs (obj hunger 100 thirst 100 health 100);
    set tempcreature.stats (obj strength 10 dexterity 10 intelligence 10);
    set tempcreature.inventory [];
    set tempcreature.equipment (obj head nil body nil legs nil hands nil feet nil);
    set tempcreature.room 1;
    return $tempcreature;
};

set Room from function {w h}
{
    set temproom (obj w $w h $h);
    set temproom.map (utils.matrix.new $w $h 46);
    
    set iy (random 2 (- $h 2));
    set oy (random 2 (- $h 2));
    set ix (random 2 (- $w 2));
    set ox (random 2 (- $w 2));
    
    set tmpw (- $w 1);
    set tmph (- $h 1);
    // create the walls on the limits
    //print $w $h;
    for {set i 1} {< $i $w} {set i (+ $i 1)}
    {
        //print $i;
        set temproom.map.$i.1 35;
        set temproom.map.$i.$tmph 35;
    };

    for {set i 1} {< $i $h} {set i (+ $i 1)}
    {
        set temproom.map.1.$i 35;
        set temproom.map.$tmpw.$i 35;
    };

    set doorbyte 32;

    set tmpx (random 2 (- $w 2));
    set temproom.map.$tmpx.1 $doorbyte;
    set tmpx (random 2 (- $w 2));
    set tmph (- $h 1);
    set temproom.map.$tmpx.$tmph $doorbyte;
    set tmpx nil;
    set tmph nil;
    set tmpy (random 2 (- $h 2));
    set temproom.map.1.$tmpy $doorbyte;
    set tmpy (random 2 (- $h 2));
    set tmpw (- $w 1);
    set temproom.map.$tmpw.$tmpy $doorbyte;
    set tmpy nil;
    set tmpw nil;

    return $temproom;
};

set genRooms from function {}
{
    set rooms from [];
    for {set x 1} {< $x (/ $roomAmount 2)} {set x (+ $x 1)}
    {
        set rooms.$x from [];
        for {set y 1} {< $y (/ $roomAmount 2)} {set y (+ $y 1)}
        {
            set rooms.$x.$y (Room (random 7 $roomMaxSize.x) (random 7 $roomMaxSize.y ));
        };
    };
    return $rooms;
};

set world from [];
set world.rooms (genRooms);
set world.creatures ([]);
set tmpx (random 5 (len $world.rooms.1));
set tmpy (random 5 (len $world.rooms));
push $world.creatures (Creature `player` (Vector2 (random 5 $tmpx ) (random 5 $tmpy)));
set player $world.creatures.1;
lua.eval {br["rawprint"] = io.write;};

set printmaptile from function {_map _x _y}
{
    lua.eval (string `io.write("" .. string.char(br._map[` $_x `][` $_y `]));`);
};

lua.eval {br["io"] = io};

set printroom from function {_map}
{
    for {set i 1} {< $i (len $_map.1)} {set i (+ $i 1)}
    {
        for {set j 1} {< $j (len $_map)} {set j (+ $j 1)}
        {
            if {and (== $j $player.position.x) (== $i $player.position.y)}
            {
                io.write {@};
            }
            else
            {
                printmaptile $_map $j $i;
            };
        };
        print {};
    };
};

printroom $world.rooms.1.1.map;