help;
set txt ([]);
set txt.data ([]);

set txt.new (lua.eval `return(
    function(name) 
        br.txt.data[name] = ""; 
    end)`);

set txt.save (lua.eval `return(
    function(name) 
        br.utils.file.save.text(name .. ".txt", br.txt.data[name]); 
    end)`);

set txt.load (lua.eval `return(
    function(name) 
        br.txt.data[name] = br.utils.file.load.text(name .. ".txt"); 
    end)`);

set txt.concat (lua.eval `return(
    function(name, text) 
        br.txt.data[name] = br.txt.data[name] .. text; 
    end)`);

set txt.set (lua.eval `return(
    function(name, text) 
        br.txt.data[name] = text; 
    end)`);

set txt.get (lua.eval `return(
    function(name) 
        return br.txt.data[name]; 
    end)`);

set txt.clear (lua.eval `return(
    function(name) 
        br.txt.data[name] = ""; 
    end)`);

set txt.remove (lua.eval `return(
    function(name) 
        br.txt.data[name] = nil; 
    end)`);

set txt.exists (lua.eval `return(
    function(name) 
        return br.txt.data[name] ~= nil; 
    end)`);

set txt.size (lua.eval `return(
    function(name) 
        return #br.txt.data[name]; 
    end)`);

set txt.print (lua.eval `return(
    function(name)
        print(br.txt.data[name]);
    end)`);

set txt.char ([]);

set txt.char.at (lua.eval `return(
    function(name, index)
        return string.sub(br.txt.data[name], index, index);
    end)`);

set txt.char.push (lua.eval `return(
    function(name, char)
        if(type(char) == "number") then
            br.txt.data[name] = br.txt.data[name] .. string.char(char);
        elseif #char == 1 then
            br.txt.data[name] = br.txt.data[name] .. char;
        else
            br.vm.debugprint(br.utils.console.colorstring("[DEBUG WARNING]","red") .. ": txt.char.push: char must be a single character or a number, concatenating just the first character of the string.");
            br.txt.data[name] = br.txt.data[name] .. string.sub(char, 1, 1);
        end
    end)`);

set txt.char.set (lua.eval `return(
    function(name, index, char)
        if(type(char) == "number") then
            br.txt.data[name] = string.sub(br.txt.data[name], 1, index) .. string.char(char) .. string.sub(br.txt.data[name], index+1);
        elseif #char == 1 then
            br.txt.data[name] = string.sub(br.txt.data[name], 1, index) .. char .. string.sub(br.txt.data[name], index+1);
        else
            br.vm.debugprint(br.utils.console.colorstring("[DEBUG WARNING]","red") .. ": txt.char.set: char must be a single character or a number, setting just the first character of the string.");
            br.txt.data[name] = string.sub(br.txt.data[name], 1, index) .. string.sub(char, 1, 1) .. string.sub(br.txt.data[name], index+1);
        end
    end)`);

set txt.line ([]);

set txt.line.push (lua.eval `return(
    function(name, text) 
        br.txt.data[name] = br.txt.data[name] .. "\n" .. text; 
    end)`);

set txt.line.set (lua.eval `return(
    function(name, linenumber, text) 
        local lines = br.utils.string.split(br.txt.data[name], "\n"); 
        lines[linenumber+1] = text; 
        br.txt.data[name] = table.concat(lines, "\n"); 
    end)`);

set txt.line.get (lua.eval `return(
    function(name, linenumber) 
        local lines = br.utils.string.split(br.txt.data[name], "\n"); 
        return lines[linenumber+1]; 
    end)`);

set txt.line.remove (lua.eval `return(
    function(name, linenumber) 
        local lines = br.utils.string.split(br.txt.data[name], "\n"); 
        table.remove(lines, linenumber+1); 
        br.txt.data[name] = table.concat(lines, "\n"); 
    end)`);

set txt.line.insert (lua.eval `return(
    function(name, linenumber, text) 
        local lines = br.utils.string.split(br.txt.data[name], "\n"); 
        table.insert(lines, linenumber+1, text); 
        br.txt.data[name] = table.concat(lines, "\n"); 
    end)`);